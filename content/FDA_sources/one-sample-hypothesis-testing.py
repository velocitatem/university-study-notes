# -*- coding: utf-8 -*-
"""Notebook 5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vp9NTyi6LhYgxpcJ4p1pruzwxOa_ipNC

>[StatsModels: Python Functions for One-sample Tests](#scrollTo=_d8UFZabvkqT)

>>[Example 1. Two-tailed test](#scrollTo=xxAOUKnzwviu)

>>>[Performing the test using the formulae](#scrollTo=L4oM3SUQyHMF)

>>[Example 2. Upper tail test](#scrollTo=945BzlK6w4vH)

>>>[Performing the test using the formulae](#scrollTo=2D33EE3Q1VQi)

>>[Example 3. Lower tail test](#scrollTo=xwZePwfRxVYp)

>>>[Performing the test using the formulae](#scrollTo=BW9Nfso_2NL9)

>>[Example 4. Two tailed t test](#scrollTo=dVm9q66w2mek)

>>>[Performing the test using the formulae](#scrollTo=24Wlslzu80nq)

>>[Example 5. Power of the test for the mean (Example 8.7 Devore)](#scrollTo=Ldu5yHtF-uF4)

>>[Example 6. Proportion test](#scrollTo=UoyEnWVlMkpm)

>>[Example 7. Power of the test for the proportion (Example 8.14 Devore)](#scrollTo=824WC7MzQG9I)
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import scipy.stats as ss

import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec

#plt.style.use('seaborn-whitegrid')
plt.style.use('seaborn')
# %matplotlib inline

import statsmodels.stats.weightstats as smw
import statsmodels.stats.proportion as smp

"""# <font color="slateblue">StatsModels: Python Functions for One-sample Tests</font>

The `statsmodels` library contains a number of statistical tests and tools. It is based on `scipy.stats` (and we could actually run all the tests using `scipy.stats`) but it is more intuitive in the way in which the data is managed. Please, have a look at [http://www.statsmodels.org/stable/stats.html](http://www.statsmodels.org/stable/stats.html) for a broad description of the library.

**NOTE**: These statistical functions in general can only be used to compute tests with **raw data**, i.e., when the entire dataset is provided. If summary data, i.e., $\bar{x}, s, n$ are given, you will have to perform the test using the formulae.

To import the library, use:

```python
import statsmodels.stats.weightstats as smw
```

The function we can use to perform one-sample tests is:
- `DescrStatsW()`: To get sample statistics, as well as z-tests (large samples), t-tests (small samples), and confidence intervals. It can also be used to compute the power of a test and the sample size.

## <font color="indianred">Example 1. Two-tailed test</t>

Generate a random sample of $n=50$ observations under a normal distribution with mean $\mu=75k$ and standard deviation $\sigma=10k$. Generate a histogram to visualize the data distribution and compute some summary statistics. Then, test whether the population mean is different to $75k$, using $\alpha=0.05$.

State your hypotheses.

\begin{equation*}
\begin{cases} 
H_0 : & \mu = 75k \\
H_a : & \mu \neq 75k \hspace1.5cm \text{(claim)} 
\end{cases}
\end{equation*}

We generate the sample
"""

np.random.seed(seed=1000)
mu=75
sigma=10
n=50
x = ss.norm.rvs(mu,sigma,n)
x

"""We plot the histogram"""

plt.hist(x, edgecolor="white", bins=7)
plt.show()

"""We obtain some summary statistics using the function DescrStatsW() from Stats models"""

res = smw.DescrStatsW(x)
res.mean, res.std, res.std_mean #standard error

"""We perform the test using Stats models. This is a two-tailed test, and we define the value of the parameter under the null mu0 =75"""

zStat, pVal = res.ztest_mean(value=75,alternative='two-sided')
zStat, pVal

"""Python provides the test statistic and the p-value. Given that $\alpha$=0.05, let us calculate the critical region as follows:"""

ss.norm.ppf(.975)

"""Observe that the test statistic is smaller, in absolute value, than the critical value, so we fail to reject. This result is consistent with the p-value, which is greater than Î±=0.05

Let us report the results using the function **print**. We also report the confidence interval. It is easy to see that the value under the null belongs to the confidence interval since we failed to reject.
"""

alpha=0.05
# print some output
print("One-sample Test with statsmodels.stats ::")
print("-"*41)
print("xbar    \t = {0:6.3f}".format(res.mean) )
print("s       \t = {0:6.3f}".format(res.std) )
print("SE       \t = {0:6.3f}".format(res.std_mean) )
print("Test stat z \t = {0:6.3f}".format(zStat) )
print("p-value  \t = {0:6.3f}".format(pVal) )
if pVal < alpha:
  print("Reject H0")
else:
  print("Fail to reject H0")
print("-"*41)
  
# we can also get the CI
lower, upper = res.zconfint_mean(alpha=0.05, alternative='two-sided')
print("{0:5.2f}% CI : [{1:6.3f}, {2:6.3f}]".format((1-alpha)*100, lower, upper))

"""### Performing the test using the formulae

We calculate the required sample statistics using numpy
"""

xbar=75.092
s=8.45
n=50
mu0=75

se=s/np.sqrt(50)
se

"""We calculate the test statistic and the p-value algebraically"""

test_stat=(xbar-mu0)/se
test_stat

(1-ss.norm.cdf(abs(test_stat)))*2

"""## <font color="indianred">Example 2. Upper tail test</t>
Repeat the analysis for the population mean being greater than 75k.

State your hypotheses.

\begin{equation*}
\begin{cases} 
H_0 : & \mu \leq 75k \\
H_a : & \mu > 75k \hspace1.5cm \text{(claim)} 
\end{cases}
\end{equation*}
"""

zStat, pVal = res.ztest_mean(value=75, alternative='larger')
zStat, pVal

ss.norm.ppf(0.95)

res.zconfint_mean(alpha=0.05, alternative='larger')

"""### Performing the test using the formulae


"""

pvalue=1-ss.norm.cdf(test_stat)
test_stat,pvalue

"""## <font color="indianred">Example 3. Lower tail test</t>
Repeat the analysis for the population mean being smaller than 75k.

State your hypotheses.

\begin{equation*}
\begin{cases} 
H_0 : & \mu \geq 75k \\
H_a : & \mu < 75k \hspace1.5cm \text{(claim)} 
\end{cases}
\end{equation*}
"""

zStat, pVal = res.ztest_mean(value=75, alternative='smaller')
zStat, pVal

ss.norm.ppf(0.05)

res.zconfint_mean(alpha=0.05, alternative='smaller')

"""### Performing the test using the formulae


"""

pvalue=ss.norm.cdf(test_stat)
test_stat,pvalue

"""## <font color="indianred">Example 4. Two tailed t test</t>
Repeat the analysis for the population mean being different to 75k but using n=15

We generate the sample using n=15
"""

np.random.seed(seed=1000)
mu=75
sigma=10
n=15
x = ss.norm.rvs(mu,sigma,n)
x

"""We plot the histogram and provide some summary statistics"""

plt.hist(x, edgecolor="white", bins=10)
plt.show()

res=smw.DescrStatsW(x)
res.mean, res.std, res.std_mean

"""We use the t distribution with n-1=14 degrees of freedom"""

tStat, pVal, dfreedom = res.ttest_mean(value=75, alternative='two-sided')
tStat, pVal, dfreedom

"""We calculate the critical value"""

ss.t.ppf(0.975,dfreedom)

"""Observe that the test statistic is smaller, in absolute value, than the critical value, so we fail to reject. This result is consistent with the p-value, greater than $\alpha$=0.05"""

res.tconfint_mean(alpha=0.05, alternative='two-sided')

"""### Performing the test using the formulae


"""

xbar=73.56246535521977
s=5.5680515657141225
se=1.4854517640660512
test_stat=(xbar-75)/se
pvalue=(1-ss.t.cdf(abs(test_stat),df=n-1))*2
test_stat,pvalue

"""## <font color="indianred">Example 5. Power of the test for the mean (Example 8.7 Devore)
Consider testing $H_o:\mu=30,000$ versus $H_a:\mu>30,000$ based on a sample of size n=16 from a normal population distribution with $\sigma=1500$. A test with $\alpha=.01$ requires $z_{\alpha}=z_{.01}=2.33$. Calculate the probability of making a type II error when $\mu'=31,000$

Assuming Normality
"""

import statsmodels.stats.power as ssp

"""Power of the test"""

ssp.normal_power_het(1000, 16, 0.01, std_null=1500, std_alternative=None, alternative='larger')

"""Required sample size"""

ssp.zt_ind_solve_power(effect_size=(30100-30000)/1500, nobs1=None, alpha=0.01, power=0.99, ratio=0, alternative='larger')

"""Using the t"""

from statsmodels.stats.power import TTestPower

"""Power of the test"""

TTestPower().power(effect_size=(31000-30000)/1500, nobs=16, alternative='larger',alpha=0.01)

"""Solving for n"""

TTestPower().solve_power(effect_size=(31000-30000)/1500, nobs=None, alpha=0.01, power=0.5395840727578776, alternative='larger')

"""## <font color="indianred">Example 6. Proportion test</t>

In Redonda Island, a random sample of 100 people shows that 55 support the present Queen. Test if the true proportion of Queen's supporters is different from $0.60$, using $\alpha=0.05$.

State your hypotheses.

\begin{equation*}
\begin{cases} 
H_0 : & p = 0.6 \\
H_a : & p \neq 0.6 \hspace1.5cm \text{(claim)} 
\end{cases}
\end{equation*}

We solve the exercise using **statsmodels**

We define the null hypothesis as p0=0.6
"""

n=100
x=55
phat=x/n
phat*(1-phat)*n

p0=0.6

smp.proportions_ztest(count=55, nobs=100, value=p0, alternative='two-sided', prop_var=p0)

"""If the true proportion of supporters is 60%, the probability of taking a sample of 100 individuals and obtaining $phat=0.55$ is $0.31$ since the sample statistic is approximately 1 standard error from the population parameter under the null. Hence, we fail to reject the null hypothesis, there is no evidence enough to reject that the supporters of the Queen are 60%

We solve the exercise using **scipy.stats**
"""

p0=0.6
n=100 
successes=55
phat=successes/n
se=np.sqrt(p0*(1-p0)/n)
test_stat=(phat-p0)/se
pVal=(1-ss.norm.cdf(abs(test_stat)))*2
test_stat,pVal

"""## <font color="indianred">Example 7. Power of the test for the proportion (Example 8.14 Devore)
Let p denote the true proportion of packages that are delivered as advertised and consider the hypotheses $H_o:p=0.9$ versus $H_a:p<0.9$. If only 80% of the packages are delivered as advertised, how likely is it that a level 0.01 test based on n=225 packages will detect such a departure from $H_{o}$
"""

ssp.normal_power_het(-0.1, 225, 0.01, std_null=0.3, std_alternative=0.4, alternative='smaller')

ssp.zt_ind_solve_power(effect_size=-0.1/0.35, nobs1=None, alpha=0.01, power=0.99, ratio=0, alternative='smaller')