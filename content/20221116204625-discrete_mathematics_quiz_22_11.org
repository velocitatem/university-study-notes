:PROPERTIES:
:ID:       ba5dc748-b331-42b2-a8fe-7b99793b62bf
:END:
#+title: Discrete Mathematics - Quiz 3



* Division
If we have two integers $a,b$, there has to be a single pair $q,r$ such that:

\[
a = qd + r
\]


The variables $q$ and $r$ are the most familiar and intuitive. The variable $q$ is the *quotient* and $r$ the *remainder*. The variables which we are given are the *dividend* ($a$) and *divisor* ($d$). To determine the values of the two unknown variables $q,r$, we can use two operations:

\begin{array}{l}
q = a \text{ div } d \\
q = a \bmod d
\end{array}


When we divide negative numbers, we have to remember the constraint on the remainder, which is the following:

\[
0 \le r \le m
\]

Since the remainder cannot be less than 0, if we divide a negative number, we need to find a quotient, with which we can have a positive remainder.

* $\text{ div }$ Function
+ It is *onto* but *not one-to-one*

* $\bmod$ Function
+ It is *not onto nor one-to-one*
+ $[a < b] \to [(a \bmod b) = a]$

This function is somewhat similar to a harmonic function, such as the main trigonometric functions $\sin$ and $\cos$. To understand what the output of this functions is, if we $a \bmod b$, the output will be given by ="If we divide the number $a$ by $b$, what will we have left"=.


* Modular Arithmetic
With two integers $a,b$, and a positive integer $m$ we can say that $a$ is congruent to $b \bmod m$. This hold true if and only if $m$ divides $a-b$.

\[
(a \equiv b \bmod m) \Leftrightarrow (m \vert a-b)
\]

The explanation above is stupid and pointless. If $(a \bmod m ) = (b \bmod m)$ then we have congruency.
** Theorem 1

** Theorem 2

** Theorem 3

** Theorem 4

* Divisibility
If $b \over a$ *has no remainder* and $a > 0$, then we can say that "a divides b" which can be represented by $a \vert b$. There are three key axioms for divisibility:

\begin{array}{l}
((a \vert b) \land (a \vert c)) \to (a \vert b + c) \quad \text{If a divides both b and c, then a divides the sum} \\
(a \vert b) \to (\forall c \in \mathbb{Z} (a \vert bc)) \quad  \text{If a divides b, then a divides the product} \\
((a \vert b) \land (b\vert c)) \to (a \vert c) \quad \text{If a divides b and b divides c, then a also divides c}
\end{array}


The last of these three theorems is very similar to the hypothetical syllogism.



* Representation of Integers
If we want to get the numeral (base 10) value of a base $b$ number, we can use the following formula:

\[
n = a_b b^k + a_{k-1}b^{k-1} + \cdots + a_0
\]

The third variable of this expression is $k$, which must be greeter than $0$ but also smaller than $b$. It is the index of the digit $a$ in reverse order.

\[
123_4 = 1 * 4^2 + 2 * 4^1 + 3 * 4^0 = 27_{10}
\]

If we want to go in the *opposite direction* and calculate the value of some integer is base $b$ we need repeatedly divide the integer by the base.

We can use these methods to easily calculate *binary, hexadecimal or octal* values.



** Binary to Base $b$
If we have some binary string that we wan to convert to hexadecimal or octal for example, we have to find *howmany bits do we need to represent that base* and split the string into groups of that size, then find their corresponding value in the base we want.

* Algorithms
A set of steps to reach some goal. Algorithms, have three fundamental structures:
+ Sequence :: A set of steps which must always be completed in a specific order.
+ Selection :: A step which will or will not be performed depending on a certain condition.
+ Iteration :: Depending on a condition, a certain step will be take a certain number of times (this number is dependent on that aforementioned condition).

** Complexity
#+begin_quote
What everyone says will be on the interview but it probably wont
#+end_quote

It is the relation an algorithm presents based on the number of operations it needs to solve a problem. The time an algorithm will take to complete is approximately equal to it's complexity.

\[
t(n) \approx Cn
\]

To represent algorithm complexity, we use the *Big O* notation. We summarize complexity by considering how fast in grows depending on the problem size, that is why we have the $n$ inside.


| Complexity  | Notation       | Example                                |
|-------------+----------------+----------------------------------------|
| Constant    | $O(C)$         | Output the first element of an array   |
| Logarithmic | $O(\log n)$    | Find a number in a sorted array        |
| Linear      | $O(n)$         | Find a number in an unsorted array     |
| Log-Linear  | $O(n \log n )$ | Using Quick-Sort                       |
| Quadratic   | $O(n^2)$        | Generate all pairs of n objects        |
| Potential   | $O(n^C)$        | Generate C-tuples of n objects         |
| Exponential | $O(C^n)$        | Generate all number of n digits        |
| Factorial   | $O(n!)$        | Generate the permutations of n objects |

* Prime Numbers
+ The set of all primes is an infinite set
It is a number greater than 1, which can only divided by 1 and itself. All other numbers, are called composite numbers. Any positive integer greater than one, can also be expressed as the product of exactly one combination of primes, the process finding these primes is called *prime factorization*.
If we want to find out if a number is a prime or composite, we can use the following proposition:

\[
(n \text{ is composite}) \Leftrightarrow \exists x ((x\neq) \land (x\ne n) \land (x\vert n))
\]

In short, what this position is saying, is that x is a composite if and only if it is not a prime.


* Greatest Common Divisor
For two positive integers $n,m$, the $GCD(n,m)$ returns a number the largest integer that divides both numbers. The easiest way to obtain the $GCD$ is to used the factorization of each number.
** Euclidean Algorithm
An alternative way to get the $GCD$ is to use the *Euclidean Algorithm*:
1. Let $a = max(m,n)$ and $b = min(m,n)$
2. $r = mod(a,b)$
3. If $r = 0$: GOTO 5
4. Let $a=b$ and $b=r$, GOTO 2
5. $b$ is the $GCD(m,n)$

The complexity of this algorithm is $O(\log n)$. If we however consider the algorithm as a function of bits we get that $O(n)$.

* Least Common Multiple
It is the smallest integer that is both a multiple of $m$ and $n$, it is given by $LCM(m,n)$. It can easily be calculated a function of the $GCD$.

\[
LCM(m,n) = \frac{mn}{GCD(m,n)}
\]
