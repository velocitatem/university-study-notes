:PROPERTIES:
:ID:       c93b0dc7-a627-4076-a31c-4d5db8849a04
:END:
#+title: Fundamentals of Data Analysis - Cheat Sheet

#+HTML: <a href="https://colab.research.google.com/github/velocitatem/university-study-notes/blob/master/content/20230413174833-fundamentals_of_data_analysis_cheat_sheet.org" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a>

* Types of Errors
+ Type I error: Reject $H_0$ when it is true (False positive)
+ Type II error: Fail to reject $H_0$ when it is false (False negative)

** Type I Error
+ Probability of type I error is $\alpha$ (usually 0.05)

** Type II Error
+ Probability of type II error is $\beta$

In python:
#+begin_src ipython :tangle yes :results output :exports both :noweb yes
  import statsmodels.stats.power as ssp
  power=ssp.tt_ind_solve_power(effect_size=None, nobs1=None, alpha=0.05, power=0.8, ratio=1.0, alternative='two-sided')
  p_tII = 1 - power
#+end_src

* Hypothesis Testing (One Sample)
We want to test the null hypothesis $H_0$ against the alternative hypothesis $H_1$.
+ $H_0$ is the null hypothesis (the status quo)
+ $H_1$ is the alternative hypothesis (the new idea)

** Hypothesis Test for Means
Conditions:
+ $n \ge 30$
+ Normal distribution of the population
+ Population standard deviation is known

Procedure:
1. State the null and alternative hypotheses
  | Null hypothesis | Alternative hypothesis | Tail         |
  |-----------------+------------------------+--------------|
  | $H_0: \mu = \mu_0$    | $H_1: \mu \ne \mu_0$           | Two-tailed   |
  | $H_0: \mu \le \mu_0$    | $H_1: \mu > \mu_0$           | Right-tailed |
  | $H_0: \mu \ge \mu_0$    | $H_1: \mu < \mu_0$           | Left-tailed  |
2. Find the test statistic
  \[
  t = \frac{\bar{x} - \mu_0}{\frac{s}{\sqrt{n}}}
  \]
3. Find p-value and compare with $\alpha$
   | Tail         | $p$ value                 |
   |--------------+---------------------------|
   | Two-tailed   | $2 \times P(\vert t\vert > t_{\alpha/2, n-1})$ |
   | Right-tailed | $P(t > t_{\alpha, n-1})$          |
   | Left-tailed  | $P(t < t_{\alpha, n-1})$          |

4. Make a decision
   + If $p \le \alpha$, reject $H_0$
   + If $p > \alpha$, fail to reject $H_0$

** Hypothesis Test for Proportions
Conditions:
+ $np \ge 10$ and $n(1-p) \ge 10$
+ Random sampling

Procedure:
1. State the null and alternative hypotheses
  | Null hypothesis | Alternative hypothesis | Tail         |
  |-----------------+------------------------+--------------|
  | $H_0: p = p_0$    | $H_1: p \ne p_0$           | Two-tailed   |
  | $H_0: p \le p_0$    | $H_1: p > p_0$           | Right-tailed |
  | $H_0: p \ge p_0$    | $H_1: p < p_0$           | Left-tailed  |

2. Find the test statistic
  \[
  z = \frac{p - p_0}{\sqrt{\frac{p_0(1-p_0)}{n}}}
  \]
3. Find p-value and compare with $\alpha$
   | Tail         | $p$ value            |
   |--------------+----------------------|
   | Two-tailed   | $2 \times P(\vert z\vert > z_{\alpha/2})$ |
   | Right-tailed | $P(z > z_{\alpha})$          |
   | Left-tailed  | $P(z < z_{\alpha})$          |
** Power of a Test
+ Probability of type I error is $\alpha$ (usually 0.05)
+ Probability of type II error is $\beta$

\[
\text{Power} = 1 - \beta
\]

*** Assuming Normality
In python:
#+begin_src ipython :tangle yes :results output :exports both :noweb yes
  import statsmodels.stats.power as ssp
  power=ssp.normal_power_het(1000, sample_size, alpha_level, std_null=population_sigma, std_alternative=None, alternative='larger')
#+end_src

*** Using a T-Distribution
#+begin_src ipython :tangle yes :results output :exports both :noweb yes
  from statsmodels.stats.power import TTestPower
  power = TTestPower().power(effect_size=None, nobs1=None, alpha=0.05, alternative='large')
#+end_src

+ effect size :: The difference between the two means divided by the standard deviation of the population. (same as above)
+ power :: What we want the power to be. (same as above)
+ ratio :: The ratio of the standard deviations of the two groups. (same as above)
** Size Determination for a Test
We try to satisfy $\beta(p^\prime) = \beta$ with:

\begin{align}
n &= \begin{cases}
\frac{z_\alpha \sqrt{p_0(1-p_0)} + z_\beta \sqrt{p^\prime(1-p^\prime)}}{p^\prime - p_0} & \text{if } \quad \text{one tail} \\
\frac{z_{\alpha/2} \sqrt{p_0(1-p_0)} + z_{\beta/2} \sqrt{p^\prime(1-p^\prime)}}{p^\prime - p_0} & \text{if } \quad \text{two tail}
\end{cases}
\end{align}

*** Assuming Normality
#+begin_src ipython :tangle yes :results output :exports both :noweb yes
  import statsmodels.stats.power as ssp
  sample_size=ssp.tt_solve_power(effect_size=None, nobs1=None, alpha=0.05, power=0.8, ratio=1.0, alternative='two-sided')
#+end_src

+ effect size :: The difference between the two means divided by the standard deviation of the population.
+ power :: What we want the power to be.
+ ratio :: The ratio of the standard deviations of the two groups.

*** Using a T-Distribution
#+begin_src ipython :tangle yes :results output :exports both :noweb yes
  from statsmodels.stats.power import TTestPower
  sample_size = TTestPower().solve_power(effect_size=None, nobs1=None, alpha=0.05, power=0.8, ratio=1.0, alternative='large')
#+end_src

+ effect size :: The difference between the two means divided by the standard deviation of the population.
+ power :: What we want the power to be.
+ ratio :: The ratio of the standard deviations of the two groups.


** Interpretation
+ Statistical significance: The result is unlikely to have occurred by chance
+ Practical significance: The result is unlikely to have occurred by chance and is also important in the real world (This can be disrupted by a large sample size)

** Achievable Significance Level
+ We can test if a significance level is achievable by using a simulation.

#+begin_src ipython :tangle yes :results output :exports both :noweb yes
  import scipy.stats as ss
  level_achievalbe = ss.binom.csv(x,20,H_0_p)
#+end_src

+ x :: The number of successes in the sample (the number of times the null hypothesis is true)
* Approaching a Hypothesis Testing Problem
# #+begin_src puml :tangle yes :results output :exports none
# @startuml
# skinparam monochrome true
# skinparam shadowing false
# skinparam defaultFontName "DejaVu Sans Mono"
# skinparam defaultFontSize 12

# start
# :State the null and alternative hypotheses;
# :Identify the test statistic;
# if (Population standard deviation is known?) then (yes)
#   if (Sample size is large?) then (yes)
#     :Use the z-test;
#   else (no)
#     :Use the t-test;
#   endif
# else (no)
#   :Use the t-test;
# endif
# :Find the p-value;
# if (p <= alpha) then (yes)
#   :Reject H0;
# else (no)
#   :Fail to reject H0;
# endif
# if (p <= alpha) then (yes)
#   :The result is statistically significant;
# else (no)
#   :The result is not statistically significant;
# endif
# stop
# @enduml
# #+end_src


[[./fda_cheat_flow.png]]



---
